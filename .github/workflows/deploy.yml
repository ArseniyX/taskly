name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run build
        run: npm run build
        
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: test
    permissions:
      contents: read
      packages: write
    
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      NODE_ENV: production
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set lowercase image name
      run: echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          SHOPIFY_API_KEY=${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET=${{ secrets.SHOPIFY_API_SECRET }}
          NODE_ENV=production
          
    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'
        
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ vars.DIGITALOCEAN_CLUSTER_NAME }}
        
    - name: Deploy with Helm
      run: |
        helm upgrade --install taskly ./helm-chart \
          --namespace taskly \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }} \
          --set image.tag=${{ github.sha }} \
          --set database.url="${{ secrets.DATABASE_URL }}" \
          --set shopify.appUrl="${{ vars.SHOPIFY_APP_URL }}" \
          --set shopify.clientId="${{ secrets.SHOPIFY_API_KEY }}" \
          --set shopify.clientSecret="${{ secrets.SHOPIFY_API_SECRET }}" \
          --set shopify.scopes="${{ vars.SHOPIFY_SCOPES }}" \
          --wait --timeout=10m